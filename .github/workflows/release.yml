on:
  push:
    branches:
      - main
    paths:
      - "changelog/config.env"

jobs:
  run-linters:
    name: Run linters
    runs-on: ubuntu-latest
    env:
      GOLANGCI_LINT_VERSION: 1.42.0
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: '^3.9'

      - name: Set up go
        uses: actions/setup-go@v5
        with:
          go-version: '^1.16'

      - name: Install pre-commit
        run: |
          pip install pre-commit

      - name: Install golangci-lint
        run: |
          mkdir -p ~/.cache/bin
          curl -sfL -o golangci-lint.tar.gz https://github.com/golangci/golangci-lint/releases/download/v${GOLANGCI_LINT_VERSION}/golangci-lint-${GOLANGCI_LINT_VERSION}-linux-amd64.tar.gz
          tar -C ~/.cache/bin -xf golangci-lint.tar.gz --strip-components 1 --wildcards '*/golangci-lint'

      - name: Run linters
        run: |
          export PATH=$HOME/.cache/bin:$PATH
          pre-commit run --all-files

  build:
    name: Build binary
    runs-on: ubuntu-latest
    needs: run-linters

    strategy:
      matrix:
        goos:
          - linux
          - darwin
        goarch:
          - amd64
          - arm64
          - arm
        include:
          - goos: linux
            goarch: arm
            goarm: 7
        exclude:
          - goos: darwin
            goarch: arm

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '^1.16'
      - name: Build binaries
        run: make
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOARM: ${{ matrix.goarm }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "halberd-${{ matrix.goos }}-${{ matrix.goarch }}"
          path: "build/halberd-${{ matrix.goos }}-${{ matrix.goarch }}"

  release:
    name: Create release
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4

      - name: Get release version
        id: release_version
        run: |
          . changelog/config.env

          RELEASE_DESCRIPTION=changelog/release-$RELEASE_VERSION.md
          if ! [ -f "$RELEASE_DESCRIPTION" ]; then
            echo "ERROR: missing $RELEASE_DESCRIPTION" >&2
            exit 1
          fi

          echo "::set-output name=release_version::$RELEASE_VERSION"
          echo "::set-output name=release_description::$RELEASE_DESCRIPTION"

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.release_version.outputs.release_version }}
          bodyFile: ${{ steps.release_version.outputs.release_description }}
          commit: ${{ github.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: artifacts/*/*
